name: build-and-deploy

on:
  push:
    branches: [ main, dev ]

env:
  IMAGE_NAME: tg_echo
  PORT:       ${{ vars.PORT }}
  LOG_LEVEL:  ${{ vars.LOG_LEVEL }}

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Build image
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{ env.IMAGE_NAME }}:latest
          load: true

      - name: Save image to tar
        run: docker save ${{ env.IMAGE_NAME }}:latest -o image.tar

      - run: chmod 644 image.tar

      - name: Ensure ~/tg_echo already exists
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ vars.SSH_HOST }}
          port:     ${{ vars.SSH_PORT }}
          username: ${{ vars.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script:   mkdir -p ~/tg_echo

      - name: Copy image to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host:     ${{ vars.SSH_HOST }}
          port:     ${{ vars.SSH_PORT }}
          username: ${{ vars.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          source:   image.tar
          target:   ~/tg_echo/

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ vars.SSH_HOST }}
          port:     ${{ vars.SSH_PORT }}
          username: ${{ vars.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            set -e
            cd ~/tg_echo
            
            echo "==> load image"
            docker load -i image.tar
            
            echo "==> stop old container"
            docker rm -f tg_echo || true
            
            echo "==> run new container: publishes on [${{ vars.SERVICE_IP }}]:${{ vars.PORT }}"
            docker run -d --name tg_echo --restart=unless-stopped \
              -e BOT_TOKEN='${{ secrets.BOT_TOKEN }}' \
              -e CHAT_ID='${{ secrets.CHAT_ID }}' \
              -e PORT='8080' \
              -e LOG_LEVEL='${{ vars.LOG_LEVEL }}' \
              --publish "[${{ vars.SERVICE_IP }}]:${{ vars.PORT }}:8080" \
              tg_echo:latest
            
            echo "ðŸŸ¢ tg_echo redeployed to [${{ vars.SERVICE_IP }}]:${{ vars.PORT }}"